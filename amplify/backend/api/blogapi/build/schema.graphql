type Post {
  id: ID!
  postOwnerId: String!
  postOwnerUsername: String!
  postTitle: String!
  postBody: String!
  createdAt: String
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  likes(filter: ModelLikeFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelLikeConnection
}

type Comment {
  id: ID!
  commentOwnerId: String!
  commentOwnerUsername: String!
  post: Post
  content: String!
  createdAt: String!
}

type Like {
  id: ID!
  numberLikes: Int!
  likeOwnerId: String!
  likeOwnerUsername: String!
  post: Post
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelPostFilterInput {
  id: ModelIDInput
  postOwnerId: ModelStringInput
  postOwnerUsername: ModelStringInput
  postTitle: ModelStringInput
  postBody: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

type Query {
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getLike(id: ID!): Like
  listLikes(filter: ModelLikeFilterInput, limit: Int, nextToken: String): ModelLikeConnection
}

input CreatePostInput {
  id: ID
  postOwnerId: String!
  postOwnerUsername: String!
  postTitle: String!
  postBody: String!
  createdAt: String
}

input UpdatePostInput {
  id: ID!
  postOwnerId: String
  postOwnerUsername: String
  postTitle: String
  postBody: String
  createdAt: String
}

input DeletePostInput {
  id: ID
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
  createLike(input: CreateLikeInput!, condition: ModelLikeConditionInput): Like
  updateLike(input: UpdateLikeInput!, condition: ModelLikeConditionInput): Like
  deleteLike(input: DeleteLikeInput!, condition: ModelLikeConditionInput): Like
}

input ModelPostConditionInput {
  postOwnerId: ModelStringInput
  postOwnerUsername: ModelStringInput
  postTitle: ModelStringInput
  postBody: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateLike: Like @aws_subscribe(mutations: ["createLike"])
  onUpdateLike: Like @aws_subscribe(mutations: ["updateLike"])
  onDeleteLike: Like @aws_subscribe(mutations: ["deleteLike"])
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  commentOwnerId: ModelStringInput
  commentOwnerUsername: ModelStringInput
  content: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  commentOwnerId: String!
  commentOwnerUsername: String!
  content: String!
  createdAt: String!
  commentPostId: ID
}

input UpdateCommentInput {
  id: ID!
  commentOwnerId: String
  commentOwnerUsername: String
  content: String
  createdAt: String
  commentPostId: ID
}

input DeleteCommentInput {
  id: ID
}

input ModelCommentConditionInput {
  commentOwnerId: ModelStringInput
  commentOwnerUsername: ModelStringInput
  content: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

type ModelLikeConnection {
  items: [Like]
  nextToken: String
}

input ModelLikeFilterInput {
  id: ModelIDInput
  numberLikes: ModelIntInput
  likeOwnerId: ModelStringInput
  likeOwnerUsername: ModelStringInput
  and: [ModelLikeFilterInput]
  or: [ModelLikeFilterInput]
  not: ModelLikeFilterInput
}

input CreateLikeInput {
  id: ID
  numberLikes: Int!
  likeOwnerId: String!
  likeOwnerUsername: String!
  likePostId: ID
}

input UpdateLikeInput {
  id: ID!
  numberLikes: Int
  likeOwnerId: String
  likeOwnerUsername: String
  likePostId: ID
}

input DeleteLikeInput {
  id: ID
}

input ModelLikeConditionInput {
  numberLikes: ModelIntInput
  likeOwnerId: ModelStringInput
  likeOwnerUsername: ModelStringInput
  and: [ModelLikeConditionInput]
  or: [ModelLikeConditionInput]
  not: ModelLikeConditionInput
}
